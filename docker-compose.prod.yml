services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    depends_on:
      collector:
        condition: service_healthy
      aggregator:
        condition: service_healthy
    env_file:
      - ./api/.env
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    ports:
      - "8001:8000"
    depends_on:
      aggregator:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./collector/.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  aggregator:
    build:
      context: .
      dockerfile: Dockerfile.aggregator
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    env_file:
      - ./aggregator/.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7.2-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  timescaledb:
    image: timescale/timescaledb:latest-pg17
    env_file:
      - ./aggregator/.env
    volumes:
      - ./timescaledb/init:/docker-entrypoint-initdb.d
      - timescaledb_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

volumes:
  redis_data:
  timescaledb_data:
  grafana_data: